name: Website Audit & Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run audit every Monday at 9 AM
    - cron: '0 9 * * 1'

jobs:
  audit:
    name: Website Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        pip install -r requirements.txt

    - name: Run website audit
      run: |
        python website_auditor.py ${{ secrets.WEBSITE_URL || 'http://localhost:3000' }}

    - name: Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: audit-results
        path: |
          audit.json
          report.md

    - name: Comment audit results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const auditResults = JSON.parse(fs.readFileSync('audit.json', 'utf8'));

          const criticalIssues = Object.values(auditResults)
            .filter(section => section.severity === 'CRITICAL').length;
          const highIssues = Object.values(auditResults)
            .filter(section => section.severity === 'HIGH').length;

          const comment = `## üîç Website Audit Results

          - üö® Critical Issues: ${criticalIssues}
          - ‚ö†Ô∏è High Priority: ${highIssues}

          ${criticalIssues > 0 ? '‚ùå **Action required**: Critical issues found' : '‚úÖ No critical issues'}

          [View detailed audit report](../actions/runs/${{ github.run_id }})`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Lint JavaScript
      run: npm run lint

    - name: Run unit tests
      run: npm test

    - name: Generate test coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start test server
      run: |
        npm run build
        npm run serve &
        sleep 10

    - name: Run E2E tests
      run: npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build website
      run: npm run build

    - name: Start server
      run: |
        npm run serve &
        sleep 10

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-results
        path: |
          lighthouse-before.json
          lighthouse-after.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for secrets with GitLeaks
      uses: zricethezav/gitleaks-action@master

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [audit, lint-and-test, e2e-tests, lighthouse]
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build for production
      run: npm run build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Examples:
        # rsync -avz --delete dist/ user@staging-server:/var/www/html/
        # aws s3 sync dist/ s3://staging-bucket --delete
        # kubectl apply -f k8s/staging/

    - name: Run post-deployment tests
      run: |
        sleep 30  # Wait for deployment
        curl -f https://staging.yoursite.com/health || exit 1
        python website_auditor.py https://staging.yoursite.com

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [audit, lint-and-test, e2e-tests, lighthouse]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build for production
      run: npm run build

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

    - name: Run smoke tests
      run: |
        sleep 60  # Wait for deployment
        curl -f https://yoursite.com/health || exit 1
        python website_auditor.py https://yoursite.com

    - name: Notify team
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
